<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cron on Sangjun 개발 블로그</title><link>https://sangjuncha-dev.github.io/tags/cron/</link><description>Recent content in cron on Sangjun 개발 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 21 Dec 2021 09:59:03 +0900</lastBuildDate><atom:link href="https://sangjuncha-dev.github.io/tags/cron/index.xml" rel="self" type="application/rss+xml"/><item><title>golang cron 스케줄링 라이브러리 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-21-golang-cron/</link><pubDate>Tue, 21 Dec 2021 09:59:03 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-21-golang-cron/</guid><description>go언어에서 cron 처럼 동작하는 스케줄링 외부 라이브러리 사용법
cron 함수는 지정한 주기마다 동작시키는 기능으로 별도의 비동기함수로 실행된다. main 함수가 종료되면 go 프로세스가 종료되어 비동기 함수도 종료된다. cron 기능을 사용할려면 main 함수가 종료되지 않도록 적절한 조치를 해야한다. 라이브러리 설치 go version : 1.17
&amp;gt; go get github.com/robfig/cron/v3@v3.0.0 예제코드 select : 복수 채널이 대기하면서 준비된 (데이터를 전송받은) 채널을 실행하는 기능이다. case 채널들이 준비되지 않으면 계속 대기하게 되고, 가장 먼저 도착한 채널의 case를 실행한다.</description></item></channel></rss>