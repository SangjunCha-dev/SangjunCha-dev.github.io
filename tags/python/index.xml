<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Sangjun 개발 블로그</title><link>https://sangjuncha-dev.github.io/tags/python/</link><description>Recent content in python on Sangjun 개발 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 08 Feb 2022 16:33:25 +0900</lastBuildDate><atom:link href="https://sangjuncha-dev.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>[python] 테스트 프레임워크 pytest 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2022-02-08-python-pytest-guide/</link><pubDate>Tue, 08 Feb 2022 16:33:25 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2022-02-08-python-pytest-guide/</guid><description>1. 개요 및 설정 pytest는 에러 없는 좋은 코드를 개발만들기 위한 목적으로 개발된 Python 테스트 프레임워크이다.
pytest 특징
다른 testing 라이브러리에 비해 사용법이 간단하다. 테스트를 병렬로 실행할 수 있다. 특정 테스트를 스킵할 수 있다. 다양한 서드 파트 라이브러리들이 있다. 설치
pip install -U pytest 2. 기본 사용법 2.1. 기본 테스트 test_sample.py
# 테스트 대상 기능 def inc(x): return x + 1 # 테스트 실행 함수 def test_answer1(): assert inc(3) == 5 def test_answer2(): assert inc(3) == 4 pytest 실행 결과</description></item><item><title>python boto3라이브러리 이용한 AWS s3 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2022-01-10-python-boto3-aws-s3-guide/</link><pubDate>Mon, 10 Jan 2022 09:36:00 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2022-01-10-python-boto3-aws-s3-guide/</guid><description>1. 개요 및 설정 Boto3는 python 애플리케이션과 AWS 서비스를 연결시키기 위해 사용하는 python 라이브러리이다.
boto3 라이브러리 설치
pip install boto3 라이브러리 import 및 AWS key 설정
conf.py
import os AWS_ACCESS_KEY_ID = &amp;#34;ACCESS_KEY_ID&amp;#34; AWS_SECRET_ACCESS_KEY = &amp;#34;SECRET_ACCESS_KEY&amp;#34; AWS_REGION = &amp;#34;REGION&amp;#34; AWS_BUCKET_NAME = &amp;#34;BUCKET_NAME&amp;#34; 2. boto3 기본 사용법 2.1. client client
Low-level 인터페이스 service description에 의해 만들어짐 botocore 수준제어 (botocore는 AWS CLI와 boto3의 기초가 되는 라이브러리) AWS API와 1:1 매핑 메소드가 스네이크 케이스로 정의되어 있음 import boto3 from conf import * client = boto3.</description></item><item><title>python 날짜와 시간 계산</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-26-python-calculate-the-date-and-time/</link><pubDate>Sun, 26 Dec 2021 22:02:26 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-26-python-calculate-the-date-and-time/</guid><description>python 날짜 및 시간 계산은 python 표준 라이브러리 datetime, 확장 라이브러리 dateutil 2개의 라이브러리가 있으며 단위의 차이가 있다.
datetime : 마이크로초, 밀리초, 초, 분, 시, 일, 주 단위 사용 dateutil : 마이크로초, 초, 분, 시, 일, 주, 월, 년 단위 사용 1. datetime 라이브러리 날짜와 시간을 조작하는 클래스를 제공하는 python 표준 라이브러리
1.1 사용예시 now : 현재 날짜 및 시간
import datetime as dt now = dt.datetime.now() print(f&amp;#34;now = {now}&amp;#34;) now = 2021-12-27 11:24:27.</description></item><item><title>python json 파일 읽기/쓰기 성능</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-06-python-json-read-write-performance/</link><pubDate>Mon, 06 Dec 2021 14:44:57 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-06-python-json-read-write-performance/</guid><description>python 언어에서 대용량 json 읽기/쓰기 성능은 사용방법과 라이브러리에 따라서 성능 차이가 있다.
테스트 기준은 동일한 json 파일을 100번씩 반복 실행하였다.
json 라이브러리의 파일 읽기/쓰기 모두 byte 모드가 상대적으로 빠르다.
라이브러리 버전
python : 3.8.10 ujson : 5.1.0 orjson : 3.6.5 1. json ========================= json_r = 0.045 sec json_w_dump = 0.186 sec json_w_dumps = 0.065 sec ========================= json_rb = 0.034 sec json_wb_dumps = 0.055 sec 1.1. read with open(&amp;#39;github.json&amp;#39;, &amp;#34;r&amp;#34;) as json_file: data = json.</description></item><item><title>python을 이용한 windows10 시스템 정보 및 사용량 모니터링</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-06-16-python-windows10-monitoring/</link><pubDate>Wed, 16 Jun 2021 16:10:28 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-06-16-python-windows10-monitoring/</guid><description>운영체제 : windows 10
설치환경 : python 3.8.8, powershell 7.1
1. WMI WMI(Windows Management Instrumentation)는 Windows 시스템 관리를 위한 다양한 정보를 일관되게 표시하는 기술이다. WMI가 표시하는 정보의 양이 제한되어 있기 때문에 WMI 개체에 액세스하기 위한 PowerShell cmdlet인 Get-CimInstance 개체 가져오기 도구를 사용한다.
해당 WMI 개체 정보 조회
Get-CimInstance -ClassName (WMI 개체이름) | select * WMI 개체이름 정보 Win32_OperatingSystem 운영체제 및 메모리 정보 Win32_Processor CPU 정보 Win32_PhysicalMemory 물리 메모리 정보 Win32_DiskDrive 물리 디스크 정보 Win32_LogicalDisk 논리 디스크 정보 Win32_VideoController 그래픽카드 정보 Get-CimInstance 옵션 매개변수로 Select-Object사용하면 WMI 클래스 인스턴스에서 반환되는 속성을 선택할 수 있다.</description></item><item><title>클래스 인스턴스 변수(self)와 함수 로컬변수 처리속도차이</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-24-python-class-instance-variable-and-function-local-variable-performance/</link><pubDate>Mon, 24 May 2021 10:34:10 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-24-python-class-instance-variable-and-function-local-variable-performance/</guid><description>설치버전 : python 3.8.8
1. 클래스 인스턴스 변수(self)와 함수 매개변수 처리속도 차이 1.1. 예제 코드 import timeit class CheckTime: def __init__(self): self.a = 0 self.b = 0 self.c = 0 def process_self(self): self.a + self.b + self.c def process_argument(self, a, b, c): a + b + c def get_time(self): self.a = 1 self.b = 2 self.c = 3 def test1(): self.process_self() process_self_time = timeit.Timer(stmt=test1).repeat(number=1000000) a = self.a b = self.</description></item><item><title>python opencv 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-opencv-guide/</link><pubDate>Fri, 21 May 2021 17:43:21 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-opencv-guide/</guid><description>설치버전 : opencv-python 4.5.1.48
docs url 라이브러리 설치
pip install opencv-python 라이브러리 import
import cv2 이미지 파일 읽기 cv2.imread(filename[, flags]) -&amp;gt; retval img = cv2.imread(image_full_path) 매개변수 이름 설명 filename 로드할 파일 이름 flags cv2 값을 사용할 수 있는 플래그 이미지 파일 저장 cv2.imwrite(filename, img[, params]) -&amp;gt; retval 이미지 형식은 파일 이름 확장자에 따라 선택됨 cv2.imwrite(image_full_path, img) 메모리 버퍼로 인코딩 이미지를 ext형식으로 변환하여 메모리 버퍼로 인코딩 cv2.imencode(ext, img[, params]) -&amp;gt; refval, buf retval, buffer = cv2.</description></item><item><title>python numpy 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-numpy-guide/</link><pubDate>Fri, 21 May 2021 15:13:24 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-numpy-guide/</guid><description>선형대수 기반의 python 라이브러리
루프없이 배열 연산이 가능하여 연산속도가 빠름 설치버전 : numpy 1.20.2
라이브러리 import
import numpy as np 1. 생성 arange np.arange([start,] stop, [step,] dtype) 지정한 숫자 범위의 array 생성함수 np.arange(10) # [0 1 2 3 4 5 6 7 8 9] np.arange(0, 5, 0.5) # [0. 0.5 1. 1.5 2. 2.5 3. 3.5 4. 4.5] zeros np.zeros(shape, dtype) 0으로 선언된 array 생성 np.zeros((2,4)) # [[0. 0. 0.</description></item><item><title>pyinstaller 라이브러리 사용법 (Pyinstaller Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-03-10-pyinstaller-guide/</link><pubDate>Wed, 10 Mar 2021 14:46:19 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-03-10-pyinstaller-guide/</guid><description>python 파일을 윈도우에서 python 이나 가상환경 설정없이 실행이 가능한 .exe 으로 변환해주는 라이브러리
1. 설치 설치환경 : Windows 10
python 실행이 가능한 가상환경 터미널에서 아래의 명령어 실행
pip install pyinstaller 2. 간단한 사용예제 pyinstaller --clean --distpath . -F -n [프로그램이름] [변환시킬 파일].py 3. 옵션 옵션 설명 &amp;ndash;clean 빌드하기 전에 PyInstaller 캐시를 정리하고 임시파일 제거 -F, &amp;ndash;onefile 단일 실행파일로 생성(실행시 사용한 라이브러리 임시파일 생성됨) -D, &amp;ndash;onedir 실행 파일을 포함하는 단일 폴더로 생성 &amp;ndash;distpath DIR 실행파일 생성 경로(default: .</description></item><item><title>pyshark 라이브러리 사용법 (pyshark Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-10-pyshark-library-guide/</link><pubDate>Wed, 10 Feb 2021 11:13:23 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-10-pyshark-library-guide/</guid><description>설치환경 : Windows 10, python 3.7
1. 설치 와이어샤크 프로그램에 포함된 npcap 설치 필요 https://www.wireshark.org/download.html pip install pyshark 2. 사용법 캡쳐파일 읽기
capture = pyshark.FileCapture(&amp;#39;./test.pcapng&amp;#39;) 실시간 패킷캡처 interface
capture = pyshark.LiveCapture(interface=&amp;#39;이더넷&amp;#39;, bpf_filter=&amp;#39;ether src host 11:22:33:44:55:66&amp;#39;, use_json=True, include_raw=True) 패킷 캡처
패킷 1개 캡처하거나 10ms 경과하면 캡처 결과 반환 capture.sniff(packet_count=1, timeout=10) 패킷 10개 캡처하거나 10ms 경과하면 캡처 결과 반환 capture.sniff(packet_count=10, timeout=10) 패킷 bytes 형태로 반환
print(capture[0].get_raw_packet()) 모든 패킷을 실행하고 읽은대로 각 패킷과 함께 주어진 콜백(함수) 호출</description></item><item><title>scapy 라이브러리 사용법 (Scapy Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-09-scapy-library-guide/</link><pubDate>Tue, 09 Feb 2021 15:25:35 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-09-scapy-library-guide/</guid><description>설치환경 : Windows 10
1. 설치 와이어샤크 프로그램에 포함된 npcap 설치 필요 https://www.wireshark.org/download.html pip install --pre scapy[basic] 2. Client 예제 from scapy.all import * from scapy.utils import rdpcap import datetime as dt # PCAP 파일 읽기 # could be used like this rdpcap(&amp;#34;filename&amp;#34;,500) fetches first 500 pkts pkts = rdpcap(&amp;#34;./pcap/test.pcapng&amp;#34;, -1) pkts = pkts[21:100] cnt = 0 repeat = 10 s_time = dt.datetime.now() for _ in range(repeat): for pkt in pkts: # print(f&amp;#34;hexdump(pkt) = {hexdump(pkt)}&amp;#34;) # Send one or more packets at 2 layer sendp(pkt, inter=0, loop=0, count=1, iface=None) # Send one or more packets at 3 layer # send(pkt, inter=0, loop=0, count=1, iface=None) cnt += 1 print(cnt) sendp(b&amp;#39;&amp;#39;, inter=0, loop=0, count=1, iface=None) time.</description></item><item><title>paramiko-scp 라이브러리 사용법 (paramiko-scp Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-01-06-paramiko-scp-guide/</link><pubDate>Wed, 06 Jan 2021 17:36:17 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-01-06-paramiko-scp-guide/</guid><description>paramiko, scp 라이브러리 연계 사용한 ssh 파일 전송
라이브러리 암호화 여부 속도 paramiko 로그인:암호화 / 파일전송:암호화 느림 paramiko+scp 로그인:암호화 / 파일전송:평문 보통 실습환경 : windows10, 원격서버환경 : linux(RHEL8)
사전에 ssh 접속가능한 linux를 구축한 후 실습 진행
1. 라이브러리 설치 pip install paramiko pip install scp paramiko : SSH 접속 및 종료 기능
Docs URL - http://docs.paramiko.org/en/stable/ scp : 파일 전송 및 다운로드 기능
Docs URL - https://pypi.org/project/scp/ 2. 사용예제 코드 2.</description></item><item><title>LeetCode Python (Easy)</title><link>https://sangjuncha-dev.github.io/posts/algorithm/leetcode/2020-12-01-algorithm-leetcode-python-easy/</link><pubDate>Tue, 01 Dec 2020 17:30:00 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/algorithm/leetcode/2020-12-01-algorithm-leetcode-python-easy/</guid><description>1. Two Sum 문제 링크
nums 리스트 속성값 중 두개의 값이 target 값과 동일할때 해당 속성 값의 index 반환 class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: for i, num in enumerate(nums): for j, num2 in enumerate(nums[i+1:]): if i != j+i+1: if target == num+num2: return [i, j+i+1] 2020-11-27
Runtime: 40 ms, faster than 97.02% of Python3 online submissions for Two Sum. Memory Usage: 14.5 MB, less than 89.</description></item><item><title>pyftpdlib 라이브러리 사용법 (pyftpdlib Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-16-pyftpdlib-guide/</link><pubDate>Mon, 16 Nov 2020 13:30:41 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-16-pyftpdlib-guide/</guid><description>1. 라이브러리 설치 pip install pyftpdlib 실습 버전 : pyftpdlib 1.5.6
2. Server ftp server 실행 후 client 테스트 가능
from pyftpdlib.authorizers import DummyAuthorizer # 사용자 인증을 생성하는 모듈 from pyftpdlib.handlers import FTPHandler # 사용자 인증, 파일 전송, 로깅 등 FTP서버를 조작하는 모듈 # from pyftpdlib.handlers import TLS_FTPHandler from pyftpdlib.servers import FTPServer # FTP서버를 실행하는 모듈 # from pyftpdlib.servers import ThreadedFTPServer import os class FileServer: def __init__(self): self.ftpServerIP = &amp;#34;127.</description></item><item><title>libmagic 라이브러리 사용법 (libmagic Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-05-python-magic-guide/</link><pubDate>Thu, 05 Nov 2020 09:53:16 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-05-python-magic-guide/</guid><description>미디어 타입(media type), MIME 타입(MIME type)
1. 라이브러리 설치 실행환경 : windows 10
pip install libmagic pip install python-magic-bin 실행환경 : linux
pip install libmagic pip install python-magic libmagic : 파일타입을 MIME 타입으로 확인해주는 라이브러리 python-magic-bin : 윈도우용 magic 라이브러리 python-magic : 리눅스용 magic 라이브러리 2. 예제 코드 import magic r1 = magic.from_file(&amp;#34;test1.txt&amp;#34;) r2 = magic.from_file(&amp;#34;test1.txt&amp;#34;, mime=True) print(f&amp;#34;filetype = {r1}, \nmime = {r2}&amp;#34;) # filetype = UTF-8 Unicode text, with CRLF line terminators, # mime = text/plain file_data = open(&amp;#39;test1.</description></item></channel></rss>