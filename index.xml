<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sangjun 개발 블로그</title><link>https://sangjuncha-dev.github.io/</link><description>Recent content on Sangjun 개발 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 07 May 2022 22:45:11 +0900</lastBuildDate><atom:link href="https://sangjuncha-dev.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Resultados de Búsqueda</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.
No se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html
Establecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.
Esta implementación utiliza Fusejs, jquery y mark.js
Configuración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.</description></item><item><title>Resultados de Búsqueda</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.
No se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html
Establecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.
Esta implementación utiliza Fusejs, jquery y mark.js
Configuración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Search Results</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>অনুসন্ধানের ফলাফল</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>অনুসন্ধানের ফলাফল</title><link>https://sangjuncha-dev.github.io/search/</link><pubDate>Tue, 08 Jun 2010 08:06:25 +0600</pubDate><guid>https://sangjuncha-dev.github.io/search/</guid><description>This file exists solely to respond to /search URL with the related search layout template.
No content shown here is rendered, all content is based in the template layouts/page/search.html
Setting a very low sitemap priority will tell search engines this is not important content.
This implementation uses Fusejs, jquery and mark.js
Initial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;JSON&amp;rdquo;] ```</description></item><item><title>Programmers Python (level 4)</title><link>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2022-05-07-algorithm-programmers-python-level4/</link><pubDate>Sat, 07 May 2022 22:45:11 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2022-05-07-algorithm-programmers-python-level4/</guid><description>[3차] 자동완성 분류 : 2018 KAKAO BLIND RECRUITMENT
문제 링크
아래와 같은 문자열 값이 주어졌을때 convert_words 함수로 문자의 위치에 따른 문자 갯수와 다음순서의 문자의 딕셔너리 자료형을 저장한다.
입력값 go gone guild 변환값 { &amp;#34;g&amp;#34;: { &amp;#34;count&amp;#34;: 3, &amp;#34;o&amp;#34;: { &amp;#34;count&amp;#34;: 2, &amp;#34;n&amp;#34;: { &amp;#34;count&amp;#34;: 1, &amp;#34;e&amp;#34;: { &amp;#34;count&amp;#34;: 1 } } }, &amp;#34;u&amp;#34;: { &amp;#34;count&amp;#34;: 1, &amp;#34;i&amp;#34;: { &amp;#34;count&amp;#34;: 1, &amp;#34;l&amp;#34;: { &amp;#34;count&amp;#34;: 1, &amp;#34;d&amp;#34;: { &amp;#34;count&amp;#34;: 1 } } } } } } 변환된 자료형에서 count_word 함수로 count값이 모두 더한다.</description></item><item><title>[golang] gui 라이브러리 fyne</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2022-02-21-golang-fyne/</link><pubDate>Mon, 21 Feb 2022 10:50:16 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2022-02-21-golang-fyne/</guid><description>1. 개요 Fyne는 사용하기 쉬운 UI 툴킷과 Go로 작성된 앱 API로 데스크탑 및 모바일 환경을 지원합니다.
fyne git 1.1. 사전 설정 Fyne 사용시 필요한 개발환경
Go 버전 1.14 이상 C 컴파일러 및 시스템 개발 도구 tdm-gcc download 테스트 시스템 환경
분류 버전 OS Windows 10 go 1.17 fyne 2.1.2 1.</description></item><item><title>[python] 테스트 프레임워크 pytest 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2022-02-08-python-pytest-guide/</link><pubDate>Tue, 08 Feb 2022 16:33:25 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2022-02-08-python-pytest-guide/</guid><description>1. 개요 및 설정 pytest는 에러 없는 좋은 코드를 개발만들기 위한 목적으로 개발된 Python 테스트 프레임워크이다.
pytest 특징
다른 testing 라이브러리에 비해 사용법이 간단하다. 테스트를 병렬로 실행할 수 있다. 특정 테스트를 스킵할 수 있다. 다양한 서드 파트 라이브러리들이 있다. 설치
pip install -U pytest 2. 기본 사용법 2.1. 기본 테스트 test_sample.py
# 테스트 대상 기능 def inc(x): return x + 1 # 테스트 실행 함수 def test_answer1(): assert inc(3) == 5 def test_answer2(): assert inc(3) == 4 pytest 실행 결과</description></item><item><title>Django 파일 다운로드</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2022-02-05-django-file-download/</link><pubDate>Sat, 05 Feb 2022 13:06:18 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2022-02-05-django-file-download/</guid><description>django에서 구현가능한 파일 다운로드 방법 예시
로컬파일 다운로드 - Blob 장점
브라우저에서 파일다운로드 완료시점을 알 수 있음 임시로 생성된 파일을 다운받을 경우 완료시점에 따른 파일 삭제가 가능함 단점
파일 용량만큼 브라우저 메모리 사용 대용량 파일다운로드에 부적합 from django.http import FileResponse from rest_framework.views import APIView import os class DownloadView(APIView): def get(self, request): ... file_handle = open(filepath, &amp;#39;rb&amp;#39;) response = FileResponse(file_handle, content_type=&amp;#39;application/zip&amp;#39;) response[&amp;#39;Content-Length&amp;#39;] = os.</description></item><item><title>python boto3라이브러리 이용한 AWS s3 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2022-01-10-python-boto3-aws-s3-guide/</link><pubDate>Mon, 10 Jan 2022 09:36:00 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2022-01-10-python-boto3-aws-s3-guide/</guid><description>1. 개요 및 설정 Boto3는 python 애플리케이션과 AWS 서비스를 연결시키기 위해 사용하는 python 라이브러리이다.
boto3 라이브러리 설치
pip install boto3 라이브러리 import 및 AWS key 설정
conf.py
import os AWS_ACCESS_KEY_ID = &amp;#34;ACCESS_KEY_ID&amp;#34; AWS_SECRET_ACCESS_KEY = &amp;#34;SECRET_ACCESS_KEY&amp;#34; AWS_REGION = &amp;#34;REGION&amp;#34; AWS_BUCKET_NAME = &amp;#34;BUCKET_NAME&amp;#34; 2. boto3 기본 사용법 2.1. client client
Low-level 인터페이스 service description에 의해 만들어짐 botocore 수준제어 (botocore는 AWS CLI와 boto3의 기초가 되는 라이브러리) AWS API와 1:1 매핑 메소드가 스네이크 케이스로 정의되어 있음 import boto3 from conf import * client = boto3.</description></item><item><title>Django 소셜로그인(oauth) facebook 연동</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-12-29-django-oauth-facebook/</link><pubDate>Fri, 07 Jan 2022 19:37:11 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-12-29-django-oauth-facebook/</guid><description>django restframework 기반의 페이스북(facebook) 인증 로그인 백엔드서버로 별도의 auth관련 라이브러리는 설치하지 않고 구현한다.
페이스북 개발자 사이트에서 사용하는 환경변수들이 등록되어있다는 가정하에 진행한다.
페이스북의 경우 다른 소셜로그인과는 용어나 흐름이 달라 추가로 설명하고 시작한다.
1. 페이스북 auth 용어 및 각 페이지 설명 1.1. Graph API 용어 Graph API는 Facebook 플랫폼에서 데이터를 요청 및 응답받는 기본적인 수단이다. 프로그래밍 방식으로 데이터 쿼리, 새 스토리 게시, 광고 관리, 사진 업로드를 비롯한 다양한 작업을 수행할 수 있는 HTTP 기반 API이다.</description></item><item><title>golang Socket, TimeRotateFile logging</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2022-01-07-golang-socket-logging/</link><pubDate>Fri, 07 Jan 2022 13:24:20 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2022-01-07-golang-socket-logging/</guid><description>1. 개요 golang 기본 로깅에서는 지원하지 않는 TimeRotate 로깅은 별도의 외부 라이브러리를 사용한다.
go get github.com/lestrrat-go/file-rotatelogs 이후에 소켓 통신을 같이 사용한 logging 프로그램까지 구현한다.
2. TimeRotateFile logging 해당 file-rotatelogs 라이브러리는 단일 파일 작성만 지원한다. 멀티 파일 작성은 다른 라이브러리를 사용해야 한다.
2.1. OPTIONS Patterm 로그저장 경로 및 파일이름 패턴지정(required) 예시: rotatelogs.New(&amp;quot;log/%Y-%m-%d.log&amp;quot;) Clock (default: rotatelogs.Local) 시간대 시스템 로컬 시간으로 설정 예시: rotatelogs.WithClock(rotatelogs.Local) RotationTime (default: 86400 sec) 로테이션 반복 주기 지정한 시간간격으로 파일 로테이션 동일파일 존재시 로그 추가작성으로 동작 time.</description></item><item><title>Django 소셜로그인(oauth) apple 연동</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-12-28-django-oauth-apple/</link><pubDate>Tue, 28 Dec 2021 19:37:11 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-12-28-django-oauth-apple/</guid><description>django restframework 기반의 애플(apple) 인증 로그인 백엔드서버로 별도의 auth관련 라이브러리는 설치하지 않고 구현한다.
애플 개발자 사이트에서 사용하는 환경변수들이 등록되어있다는 가정하에 진행한다.
1. 라이브러리 설치 $ pip install django # restframework $ pip install djangorestframework $ pip install djangorestframework-simplejwt # pyjwt[crypto] $ pip install pyjwt[crypto] 2. Apple 로그인 변수 설정 import os APPLE_CONFIG = { &amp;#34;APPLE_TEAM_ID&amp;#34;: TEAM_ID, &amp;#34;APPLE_CLIENT_ID&amp;#34;: 모바일 로그인시 Bundle ID or 웹 로그인시 Service ID, &amp;#34;APPLE_REDIRECT_URI&amp;#34;: &amp;#34;https://domain/REDIRECT_URI&amp;#34;, &amp;#34;APPLE_KEY_ID&amp;#34;: KEY_ID, &amp;#34;APPLE_KEY_PATH&amp;#34;: &amp;#34;.</description></item><item><title>python 날짜와 시간 계산</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-26-python-calculate-the-date-and-time/</link><pubDate>Sun, 26 Dec 2021 22:02:26 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-26-python-calculate-the-date-and-time/</guid><description>python 날짜 및 시간 계산은 python 표준 라이브러리 datetime, 확장 라이브러리 dateutil 2개의 라이브러리가 있으며 단위의 차이가 있다.
datetime : 마이크로초, 밀리초, 초, 분, 시, 일, 주 단위 사용 dateutil : 마이크로초, 초, 분, 시, 일, 주, 월, 년 단위 사용 1. datetime 라이브러리 날짜와 시간을 조작하는 클래스를 제공하는 python 표준 라이브러리
1.1 사용예시 now : 현재 날짜 및 시간
import datetime as dt now = dt.</description></item><item><title>golang db nullable 데이터 처리</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-23-golang-db-nullable-value/</link><pubDate>Thu, 23 Dec 2021 16:39:22 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-23-golang-db-nullable-value/</guid><description>golang에서는 타입별로 정해진 zero value가 있는데, DB colume 타입의 zero value와 맞지 않을 때 다음과 에러가 발생한다.
panic: sql: Scan error on column index : converting NULL to string is unsupported 각 타입별 zero value
문자열 타입 string : &amp;quot;&amp;quot; 부울린 타입 boolean : false 정수형, Float등 숫자형 타입 : 0 기타 타입 : nil 1. 사전환경 아래의 글을 진행했다는 가정에서 설명한다.
golang postgreDB CURD
2.</description></item><item><title>golang 도커 이미지 만들기</title><link>https://sangjuncha-dev.github.io/posts/docker/2021-12-22-docker-golang-image-build/</link><pubDate>Wed, 22 Dec 2021 15:22:06 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/docker/2021-12-22-docker-golang-image-build/</guid><description>간단한 golang 웹 프로그램을 Docker 이미지로 실행방법으로
golang 코드보다는 docker 설정 위주로 설명한다.
1. 예제 코드 사용예시는 아래의 주소를 git clone 받는다.
&amp;gt; git clone https://github.com/olliefr/docker-gs-ping docker-gs-ping 2. 예제 프로그램 실행 git clone 받은 프로젝트 경로에서 터미널을 실행하고 진행한다.
&amp;gt; go run main.go 설정한 웹주소로 접속 요청시 간단한 response 메세지를 응답한다.
&amp;gt; curl localhost:8080 Hello, Docker! &amp;lt;3 3. Dockerfile dockerfile 명칭은 Dockerfile.&amp;lt;something&amp;gt; 또는 &amp;lt;something&amp;gt;.Dockerfile 형식으로 생성한다.</description></item><item><title>도커 경량화 이미지 만들기</title><link>https://sangjuncha-dev.github.io/posts/docker/2021-12-21-docker-reduce-the-volume/</link><pubDate>Tue, 21 Dec 2021 11:24:13 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/docker/2021-12-21-docker-reduce-the-volume/</guid><description>Docker Image 경량화의 장점
저장공간 절약 이미지 빌드 및 배포시간 단축 클라우드 서비스를 이용한 배포의 경우 비용 절약 1. 가벼운 Base image 사용 Base image에는 사용하지 않은 기능들이 포함되어 있기때문에 Debian계열과 Alpine 계열등 다양한 Base image를 사용하여 용량을 줄일 수 있다.
단, 필요한 패키지나 파일이 없어 별도의 설치가 필요할 수 있다. 기본 python 이미지와 slim형 이미지를 각각 빌드한다.
image-test1
FROM python:3.8.10 image-test2
FROM python:3.8.10-slim-buster 각각 빌드된 이미지 크기는 다음과 같다.</description></item><item><title>golang cron 스케줄링 라이브러리 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-21-golang-cron/</link><pubDate>Tue, 21 Dec 2021 09:59:03 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-21-golang-cron/</guid><description>go언어에서 cron 처럼 동작하는 스케줄링 외부 라이브러리 사용법
cron 함수는 지정한 주기마다 동작시키는 기능으로 별도의 비동기함수로 실행된다. main 함수가 종료되면 go 프로세스가 종료되어 비동기 함수도 종료된다. cron 기능을 사용할려면 main 함수가 종료되지 않도록 적절한 조치를 해야한다. 1. 라이브러리 설치 go version : 1.17
&amp;gt; go get github.com/robfig/cron/v3@v3.0.0 2. 예제코드 select : 복수 채널이 대기하면서 준비된 (데이터를 전송받은) 채널을 실행하는 기능이다. case 채널들이 준비되지 않으면 계속 대기하게 되고, 가장 먼저 도착한 채널의 case를 실행한다.</description></item><item><title>Programmers Python (level 3)</title><link>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2021-12-20-algorithm-programmers-python-level3/</link><pubDate>Mon, 20 Dec 2021 16:05:36 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2021-12-20-algorithm-programmers-python-level3/</guid><description>다단계 칫솔 판매 분류 : 2021 Dev-Matching: 웹 백엔드 개발자(상반기)
문제 링크
방법1 def solution(enroll, referral, seller, amount): answer = [] data = {&amp;#39;center&amp;#39;: {&amp;#39;amount&amp;#39;: 0,&amp;#39;parent&amp;#39;: None}} for i in range(len(enroll)): data[enroll[i]] = { &amp;#39;amount&amp;#39;: 0, &amp;#39;parent&amp;#39;: referral[i] if referral[i] != &amp;#39;-&amp;#39; else &amp;#39;center&amp;#39; } for i in range(len(seller)): sell = seller[i] price = amount[i] * 100 data[sell][&amp;#39;amount&amp;#39;] += price-price//10 price = price//10 while data[sell][&amp;#39;parent&amp;#39;] and price: sell = data[sell][&amp;#39;parent&amp;#39;] if sell == &amp;#39;center&amp;#39;: data[sell][&amp;#39;amount&amp;#39;] += price break data[sell][&amp;#39;amount&amp;#39;] += price-price//10 price = price//10 del data[&amp;#39;center&amp;#39;] for value in data.</description></item><item><title>golang fcm(firebase cloud messaging) push 메세지 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-18-golang-fcm-backend/</link><pubDate>Sat, 18 Dec 2021 17:49:21 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-18-golang-fcm-backend/</guid><description>Firebase Cloud Messaging(FCM)은 firebase에서 무료로 메시지 전송할 수 있는 교차 플랫폼 메시징 솔루션이다.
최대 4,000바이트의 페이로드를 클라이언트 앱에 전송할 수 있다.
아래의 예제는 Go언어 기반의 백엔드 서버 예시이며 fcm token이 이미 발급받았다는 가정하에 진행된다.
1. 라이브러리 설치 &amp;gt; go get firebase.google.com/go/v4 &amp;gt; go get google.golang.org/api 2. Firebase APP 초기화 사용자 인증 정보 제공의 안내에 따라 서비스 계정의 비공개 키 파일을 다운받는다.
해당 파일에는 다음과 같은 정보가 있다.</description></item><item><title>golang postgreDB CURD</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-16-golang-postgredb-crud/</link><pubDate>Thu, 16 Dec 2021 13:09:17 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-12-16-golang-postgredb-crud/</guid><description>golang에서 postgre데이터 베이스의 SQL 생성, 수정, 읽기, 삭제 기능의 간단한 사용법이다.
postgreDB가 이미 설치되어 있다는 전제하에 진행한다.
로컬 설정 : PostgreDB 설치 도커 이미지 : PostgreDB, pgadmin4 도커 설치 방법 1. 라이브러리 설치 go version : 1.17
&amp;gt; go get github.com/lib/pq 2. 테이블 구조 postgreDB에 아래와 같은 구조의 User 테이블이 선언된 상태로 진행한다.
CREATE TABLE user ( id SERIAL PRIMARY KEY, name VARCHAR(20), age INT ); 3.</description></item><item><title>Django crontab 라이브러리 사용법</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-12-09-django-corntab-guide/</link><pubDate>Thu, 09 Dec 2021 15:44:54 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-12-09-django-corntab-guide/</guid><description>django-crontab 라이브러리는 OS의 cron/crontab 서비스를 사용하는것으로 해당 서비스 설치가 되지 않았다면 별도로 설치를 해야함.
windows 환경에서는 docker를 설치하여 진행 1. 라이브러리 설치 $ pip install django-crontab 2. django 설정 임의의 app 디렉터리내 cron.py 생성 아래의 함수를 작성한다.
반복 실행할 임의의 함수 선언 def hello_every_minute(): print(&amp;#34;hello world&amp;#34;) settings.py
django_crontab 앱 추가 INSTALLED_APPS = [ &amp;#39;django_crontab&amp;#39;, .</description></item><item><title>python json 파일 읽기/쓰기 성능</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-06-python-json-read-write-performance/</link><pubDate>Mon, 06 Dec 2021 14:44:57 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-12-06-python-json-read-write-performance/</guid><description>python 언어에서 대용량 json 읽기/쓰기 성능은 사용방법과 라이브러리에 따라서 성능 차이가 있다.
테스트 기준은 동일한 json 파일을 100번씩 반복 실행하였다.
json 라이브러리의 파일 읽기/쓰기 모두 byte 모드가 상대적으로 빠르다.
라이브러리 버전
python : 3.8.10 ujson : 5.1.0 orjson : 3.6.5 1. json ========================= json_r = 0.045 sec json_w_dump = 0.186 sec json_w_dumps = 0.065 sec ========================= json_rb = 0.034 sec json_wb_dumps = 0.055 sec 1.1. read with open(&amp;#39;github.</description></item><item><title>Django 소셜로그인(oauth) google 연동</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-11-22-django-oauth-google/</link><pubDate>Mon, 22 Nov 2021 23:59:02 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-11-22-django-oauth-google/</guid><description>django restframework 기반의 구글(google) 인증 로그인 백엔드서버로 별도의 auth관련 라이브러리는 설치하지 않고 구현한다.
Google Cloud Platform에서 로그인에 사용하는 환경변수를 설정하고 진행한다.
1. 로그인 환경변수 설정 1.1. 프로젝트 생성 Google Cloud Platform에서 [프로젝트 만들기] 메뉴로 간다. 프로젝트 이름을 지정하고 [만들기] 클릭한다.
1.2. 사용자 인증 정보 설정 [사용자 인증 정보] → [사용자 인증 정보 만들기] → [OAuth 클라이언트 ID] 선택
애플리케이션 유형: 웹 애플리케이션 선택 후 앱 이름 지정</description></item><item><title>Django 소셜로그인(oauth) naver 연동</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-11-12-django-oauth-naver/</link><pubDate>Fri, 12 Nov 2021 11:49:25 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-11-12-django-oauth-naver/</guid><description>django restframework 기반의 네이버(naver) 인증 로그인 백엔드서버로 별도의 auth관련 라이브러리는 설치하지 않고 구현한다.
네이버 개발자 사이트에서 로그인에 사용하는 환경변수를 설정하고 진행한다.
1. 로그인 환경변수 설정 1.1. 애플리케이션 생성 및 웹 로그인 설정 네이버 개발자 사이트 가입하고 아래의 과정을 진행한다.
[Application] → [애플리케이션 등록] → 애플리케이션 이름 지정 → [사용 API] 네이버 로그인 선택한다.
사용자 제공 정보 선택에서 [이메일 주소]를 필수로 선택한다.(회원가입 확인 용도로 사용예정)
서비스 환경의 PC 웹을 선택한다.</description></item><item><title>Django 소셜로그인(oauth) kakao 연동</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-10-11-django-oauth-kakao/</link><pubDate>Mon, 11 Oct 2021 21:44:42 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-10-11-django-oauth-kakao/</guid><description>django restframework 기반의 카카오(kakao) 인증 로그인 백엔드서버로 별도의 auth관련 라이브러리는 설치하지 않고 구현한다.
카카오 개발자 사이트에서 로그인에 사용하는 환경변수를 설정하고 진행한다.
1. 로그인 환경변수 설정 1.1. 애플리케이션 생성 카카오 개발자 사이트에 가입후 [내 애플리케이션] → [애플리케이션 추가하기] 클릭한다.
앱 아이콘(선택), 앱 이름, 사업자명을 등록한다.
정상적으로 등록되어 애플리케이션 목록에서 확인할 수 있다.
1.2. 웹 로그인 설정 생성한 앱을 클릭하면 키 정보를 확인하고 [플랫폼 설정하기] 클릭한다.</description></item><item><title>Django drf_yasg Swagger 기본 사용법</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-09-24-django-swagger/</link><pubDate>Fri, 24 Sep 2021 09:23:07 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-09-24-django-swagger/</guid><description>drf_yasg : REST 프레임워크용 swagger/openAPI 문서 자동화 라이브러리 swagger : 개발자가 REST 웹 서비스를 설계, 빌드, 문서화, 테스트를 도와주는 오픈소스 소프트웨어 프레임워크
drf_yasg : 1.20.0 호환버전
Django Rest Framework : 3.10, 3.11, 3.12 Django : 2.2, 3.0, 3.1 Python : 3.6, 3.7, 3.8, 3.9 라이브러리 설치
pip install -U drf-yasg 1. 프로젝트 생성 환경 : windwos 10
# 가상환경 생성 및 접속 &amp;gt; python -m venv venv &amp;gt; venv\Scripts\activate # 라이브러리 설치 (venv)&amp;gt; pip install django (venv)&amp;gt; pip install djangorestframework (venv)&amp;gt; pip install drf-yasg # 프로젝트 및 앱 생성 (venv)&amp;gt; django-admin startproject config .</description></item><item><title>golang learn-go-with-tests GitBook 정리</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-08-02-golang-learn-go-with-tests/</link><pubDate>Mon, 02 Aug 2021 17:56:14 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-08-02-golang-learn-go-with-tests/</guid><description>사이트 주소 원본 링크
한글 번역 링크
5. struct, method &amp;amp; interface struct 구조체의 변수 첫글자는 대문자여야한다. (외부에서 사용 가능하도록)
type Rectangle struct { Width float64 Height float64 } 구조체 필드이름을 선택적으로 지정할 수 있다.
{shape: Rectangle{Width: 12, Height: 6}, want: 72.0}, {shape: Circle{Radius: 10}, want: 314.1592653589793}, methods func (receiverName ReceiverType) MethodName(args) r Rectangle 수신자 변수를 유형의 첫 번째 문자로 지정하는 것이 Go의 관례이다.
func (r Rectangle) Area() float64 { return 0 } interface Go에서 인터페이스 자료형은 암시적 이다.</description></item><item><title>golang gopacket 라이브러리를 이용한 통신</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-07-29-golang-gopacket/</link><pubDate>Thu, 29 Jul 2021 17:12:58 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-07-29-golang-gopacket/</guid><description>gopacket : 이더넷 어댑터 설명(dev.Description)명칭으로 ethernet 통신하는 라이브러리이다.
예제 코드 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/google/gopacket&amp;#34; &amp;#34;github.com/google/gopacket/layers&amp;#34; &amp;#34;github.com/google/gopacket/pcap&amp;#34; ) var ( device string = &amp;#34;Realtek PCIe GbE Family Controller&amp;#34; eth_name string currentIP string snapshot_len int32 = 1522 promiscuous bool = false err error timeout time.Duration = 30 * time.</description></item><item><title>python을 이용한 windows10 시스템 정보 및 사용량 모니터링</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-06-16-python-windows10-monitoring/</link><pubDate>Wed, 16 Jun 2021 16:10:28 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-06-16-python-windows10-monitoring/</guid><description>운영체제 : windows 10
설치환경 : python 3.8.8, powershell 7.1
1. WMI WMI(Windows Management Instrumentation)는 Windows 시스템 관리를 위한 다양한 정보를 일관되게 표시하는 기술이다. WMI가 표시하는 정보의 양이 제한되어 있기 때문에 WMI 개체에 액세스하기 위한 PowerShell cmdlet인 Get-CimInstance 개체 가져오기 도구를 사용한다.
해당 WMI 개체 정보 조회
Get-CimInstance -ClassName (WMI 개체이름) | select * WMI 개체이름 정보 Win32_OperatingSystem 운영체제 및 메모리 정보 Win32_Processor CPU 정보 Win32_PhysicalMemory 물리 메모리 정보 Win32_DiskDrive 물리 디스크 정보 Win32_LogicalDisk 논리 디스크 정보 Win32_VideoController 그래픽카드 정보 Get-CimInstance 옵션 매개변수로 Select-Object사용하면 WMI 클래스 인스턴스에서 반환되는 속성을 선택할 수 있다.</description></item><item><title>Django socketio 라이브러리 활용한 통신</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-06-11-django-websocket-using-channels-library-guide/</link><pubDate>Fri, 11 Jun 2021 10:59:51 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-06-11-django-websocket-using-channels-library-guide/</guid><description>1. 라이브러리 설치 1.1. server 라이브러리 설치 pip install python-socketio 1.2. client 라이브러리 설치 pip install &amp;#34;python-socketio[client]&amp;#34; 2. Server django settings projectname/wsgi.py
... import socketio from appname.views import sio # sio code path ... # application = get_wsgi_application() sio.register_namespace(TransferNamespace(&amp;#39;/transfer&amp;#39;)) django_app = get_wsgi_application() application = socketio.WSGIApp(sio, django_app) appname/views.py
import socketio sio = socketio.Server(async_mode=&amp;#39;threading&amp;#39;, async_handlers=True, ping_interval=60) class TransferNamespace(socketio.Namespace): def on_connect(self, sid: str, environ: dict): &amp;#39;&amp;#39;&amp;#39; 클라이언트 접속 &amp;#39;&amp;#39;&amp;#39; print(f&amp;#34;connect address = {environ[&amp;#39;REMOTE_ADDR&amp;#39;]}, sid = {sid}&amp;#34;) def on_disconnect(self, sid: str): &amp;#39;&amp;#39;&amp;#39; 클라이언트 접속 종료 &amp;#39;&amp;#39;&amp;#39; print(f&amp;#34;disconnect Client disconnected = {sid}&amp;#34;) def send_event(self, sid: str): &amp;#39;&amp;#39;&amp;#39; 특정 sid 클라이언트에 이벤트 전송 &amp;#39;&amp;#39;&amp;#39; print(&amp;#34;send_event&amp;#34;) self.</description></item><item><title>클래스 인스턴스 변수(self)와 함수 로컬변수 처리속도차이</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-24-python-class-instance-variable-and-function-local-variable-performance/</link><pubDate>Mon, 24 May 2021 10:34:10 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-24-python-class-instance-variable-and-function-local-variable-performance/</guid><description>설치버전 : python 3.8.8
1. 클래스 인스턴스 변수(self)와 함수 매개변수 처리속도 차이 1.1. 예제 코드 import timeit class CheckTime: def __init__(self): self.a = 0 self.b = 0 self.c = 0 def process_self(self): self.a + self.b + self.c def process_argument(self, a, b, c): a + b + c def get_time(self): self.a = 1 self.b = 2 self.</description></item><item><title>python opencv 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-opencv-guide/</link><pubDate>Fri, 21 May 2021 17:43:21 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-opencv-guide/</guid><description>설치버전 : opencv-python 4.5.1.48
docs url 라이브러리 설치
pip install opencv-python 라이브러리 import
import cv2 이미지 파일 읽기 cv2.imread(filename[, flags]) -&amp;gt; retval img = cv2.imread(image_full_path) 매개변수 이름 설명 filename 로드할 파일 이름 flags cv2 값을 사용할 수 있는 플래그 이미지 파일 저장 cv2.imwrite(filename, img[, params]) -&amp;gt; retval 이미지 형식은 파일 이름 확장자에 따라 선택됨 cv2.</description></item><item><title>python numpy 사용법</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-numpy-guide/</link><pubDate>Fri, 21 May 2021 15:13:24 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-21-python-numpy-guide/</guid><description>선형대수 기반의 python 라이브러리
루프없이 배열 연산이 가능하여 연산속도가 빠름 설치버전 : numpy 1.20.2
라이브러리 import
import numpy as np 1. 생성 arange np.arange([start,] stop, [step,] dtype) 지정한 숫자 범위의 array 생성함수 np.arange(10) # [0 1 2 3 4 5 6 7 8 9] np.arange(0, 5, 0.5) # [0. 0.5 1. 1.5 2. 2.5 3. 3.5 4. 4.5] zeros np.zeros(shape, dtype) 0으로 선언된 array 생성 np.</description></item><item><title>Windows10 WSL2(Windows Subsystem for Linux) 사용법</title><link>https://sangjuncha-dev.github.io/posts/os/windows/2021-05-07-windows10-wsl2-guide/</link><pubDate>Fri, 07 May 2021 13:36:31 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/os/windows/2021-05-07-windows10-wsl2-guide/</guid><description>1. WSL(Windows Subsystem for Linux)2 리눅스용 윈도우 하위 시스템(Windows Subsystem for Linux)은 Windows 10에서 네이티브로 리눅스 실행 파일을 실행하기 위한 호환성 계층 프로그램이다.
2. 사전 설정 microsoft store에서 Windows Terminal 설치한다. Windows Terminal 프로그램을 관리자 권한으로 실행한다. 2.1. WSL2 활성화를 위한 DISM 명령어 실행후 재부팅 &amp;gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart &amp;gt; dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 2.2. Windows Store 에서 설치하는 모든 Linux 배포판 포맷을 WSL 2로 설정 &amp;gt; wsl --set-default-version 2 3.</description></item><item><title>mssql 2017 도커 이미지 설치 및 컨테이너 실행방법</title><link>https://sangjuncha-dev.github.io/posts/docker/2021-05-06-docker-mssql2017-setup/</link><pubDate>Thu, 06 May 2021 22:29:30 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/docker/2021-05-06-docker-mssql2017-setup/</guid><description>1. mssql docker 도커 설치 방법 1.1. 도커 허브에서 이미지 검색 docker search &amp;lt;검색할 이미지 이름&amp;gt; 1.2. pull - 도커 이미지 다운받기 docker pull mcr.microsoft.com/mssql/server:2017-latest 1.3. docs 예시 docker run -e &amp;#34;ACCEPT_EULA=Y&amp;#34; -e &amp;#34;SA_PASSWORD=&amp;lt;YourStrong@Passw0rd&amp;gt;&amp;#34; -p 1433:1433 --name mssql2017 -h mssql2017 -v &amp;lt;host directory&amp;gt;/data:/var/opt/mssql/data -v &amp;lt;host directory&amp;gt;/log:/var/opt/mssql/log -v &amp;lt;host directory&amp;gt;/secrets:/var/opt/mssql/secrets -d mcr.microsoft.com/mssql/server:2017-latest Docker on Windows 의 호스트 볼륨 매핑은 현재 /var/opt/mssql 디렉토리가 아닌 /var/opt/mssql/data 등의 하위 디렉터리를 호스트 머신에 매핑할 수 있다.</description></item><item><title>PostgreDB, pgadmin4 도커 설치 방법</title><link>https://sangjuncha-dev.github.io/posts/docker/2021-04-29-docker-postgresdb-pgadmin4-setup-guide/</link><pubDate>Thu, 29 Apr 2021 16:29:43 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/docker/2021-04-29-docker-postgresdb-pgadmin4-setup-guide/</guid><description>1. Postgres Docker 이미지 설치 Postgres Version : 13.2
1.1. 다운로드 및 설정 아래 명령어를 실행한다.
$ docker run -p 15432:5432 --name postgres -e POSTGRES_PASSWORD=password1! -d postgres -d : 백그라운드에서 컨테이너 실행 -p 15432:5432 : 호스트와 컨테이너 간의 배포(publish)포트/바인드(bind)포트 호스트 15432번 포트를 컨테이너 5432번 포트에 매핑 --name : 생성할 컨테이너 이름 -e : 도커 컨테이너의 환경변수 설정 POSTGRES_PASSWORD : PostgresDB 관리자 비밀번호 실행 결과</description></item><item><title>Django 파일 업로드</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-22-django-file-upload/</link><pubDate>Thu, 22 Apr 2021 13:18:18 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-22-django-file-upload/</guid><description> 청크단위 파일 업로드 용량제한 없이 대용량파일 업로드 가능 실시간 업로드 상황을 프로그래스바에 응용가능 from django.conf import settings def upload(request): if request.method == &amp;#39;POST&amp;#39;: path = settings.MEDIA_ROOT files = request.FILES[&amp;#39;file&amp;#39;] for file in files: file_path = f&amp;#39;{path}/{file.name}&amp;#39; with open(file_path,&amp;#39;wb+&amp;#39;) as dst_file: for chunk in file.chunks(): dst_file.write(chunk)</description></item><item><title>Django json 데이터 반환하기</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-20-django-model-to-json-response/</link><pubDate>Tue, 20 Apr 2021 09:30:40 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-20-django-model-to-json-response/</guid><description>api 서버 등 json 데이터로 통신하는 서버에서 사용할 수 있는 예제이다.
1. 사전 설정 프로젝트 생성 후 user 앱의 User 모델을 생성한다.
임의의 user 데이터를 2개 등록한다.
models.py
class User(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=20, unique=True) 2. 사용 예시 2.1. QuerySet(Model Instance)을 json형태로 변환할 경우 .all() serializers.serialize('json', value_name) 함수를 사용하여 json 형태로 변환시킨다.
views.py
from django.core import serializers res_data = User.objects.all() # &amp;lt;QuerySet [&amp;lt;User: User object (1)&amp;gt;, &amp;lt;User: User object (2)&amp;gt;]&amp;gt; res_data = serializers.</description></item><item><title>도커의 개요 및 windows10 버전 설치 방법</title><link>https://sangjuncha-dev.github.io/posts/docker/2021-04-08-docker-summary/</link><pubDate>Thu, 08 Apr 2021 19:04:55 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/docker/2021-04-08-docker-summary/</guid><description>1. 개요 도커(Docker)는 리눅스 컨테이너를 기반으로 특정 서비스를 패키징하고 배포할 수 있는 오픈소스 프로그램이다.
컨테이너 : 리눅스 커널 네임 스페이스, cgroup의 기능을 활용하여 호스트 시스템의 모든 프로세스와 격리된 시스템의 프로세스 2. 도커를 사용하는 이유 도커는 소프트웨어 버전관리, 애플리케이션 배포, 개발환경 구성등 사전에 생성하고 도커 이미지를 배포하고 배포한 이미지를 컨테이너에 담아서 사용된다.
도커 이미지 : 컨테이너의 파일시스템과 애플리케이션 실행에 필요한 모든 항목(모든 종속성, 구성, 스크립트, 바이너리, 환경변수, 실행하는 기본 명령)이 포함된다.</description></item><item><title>Django model 참조 객체 호출하기</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-07-django-models-relations-object-call/</link><pubDate>Wed, 07 Apr 2021 17:34:37 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-07-django-models-relations-object-call/</guid><description>1. 정참조와 역참조 객체 호출 데이터베이스의 임의의 테이블로 User, Occupation 생성한다.
두 테이블은 User 모델의 객체가 Occupation 모델의 객체를 N:1 참조관계를 가진다.
models.py 설정
class User(models.Model): name = models.CharField(max_length=50) age = models.IntegerField() job = models.ForeignKey(&amp;#39;Occupation&amp;#39;, on_delete=models.CASCADE) class Occupation(models.Model): name = models.CharField(max_length=50) 2. 정참조 객체 호출하기 user1 객체가 Occupation 모델을 참조키(ForeignKey)로 정참조하여, Occupation 모델의 속성을 사용할 수 있다.
user1 = User.objects.get(id = 1) user1.job.name &amp;gt;&amp;gt;&amp;gt; &amp;#39;Developer&amp;#39; 3.</description></item><item><title>Django 동적 모델 및 테이블 생성</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-07-django-dynamic-model-and-table-create/</link><pubDate>Wed, 07 Apr 2021 10:51:18 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-07-django-dynamic-model-and-table-create/</guid><description>1. Django 동적 모델 및 테이블 생성 django는 makemigrations, migrate 명령어를 통하여 테이블 생성한다.
이때 웹서버는 실행중일 경우 중단하고 다시 재시작한다.
운영환경에 따라서 웹서버가 중단되지 않고 운영이 필요한경우에는 위의 방법이 아닌 동적 모델 및 테이블 생성방법이 필요하다.
2. 예시코드 2.1. 상속받을 추상모델 작성 models.py
from django.db import models class Board(models.Model): title = models.CharField(max_length=100) contents = models.CharField(max_length=500) class Meta: abstract = True 2.2. 동적 모델 생성 및 삭제 from .</description></item><item><title>Django QuerySet 객체 접근방식 및 조회</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-06-django-queryset-object-access/</link><pubDate>Tue, 06 Apr 2021 15:58:51 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-04-06-django-queryset-object-access/</guid><description>1. QuerySet 이란? Database에서 응답받은 결과 목록(list)으로 Python 코드가 SQL 구문으로 맵핑(mapping)되고 DB로 전달하여 받은 응답값을 QuerySet 자료형으로 반환한다.
2. 사전설정 django version : 3.2
models.py
from django.db import models class User(): name = models.CharField(max_length=20) age = models.models.PositiveSmallIntegerField() &amp;gt;&amp;gt;&amp;gt; python manage.py shell #shell 실행 &amp;gt;&amp;gt;&amp;gt; from user.models import User #모델클래스 임포트 &amp;gt;&amp;gt;&amp;gt; user1 = User(name=&amp;#39;Foo&amp;#39;, age=15) # 데이터추가 &amp;gt;&amp;gt;&amp;gt; user1.save() # 데이터 저장 &amp;gt;&amp;gt;&amp;gt; user2 = User(name=&amp;#39;Bar&amp;#39;, age=20) # 데이터추가 &amp;gt;&amp;gt;&amp;gt; user2.</description></item><item><title>Django models AutoOneToOneField 사용법</title><link>https://sangjuncha-dev.github.io/posts/framework/django/2021-03-31-django-models-autoonetoonefield/</link><pubDate>Wed, 31 Mar 2021 12:55:35 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/framework/django/2021-03-31-django-models-autoonetoonefield/</guid><description>model 상속할때 테이블 컬럼 데이터 자동 생성방법
라이브러리 설치 pip install django-annoying models 설정 django의 models.OneToOneField는 데이터 변경없이(default 설정) 저장하면 해당 데이터(row)가 생성되지않음
models.AutoOneToOneField는 데이터가 default값이어도 데이터(row) 생성됨
from annoying.fields import AutoOneToOneField # User모델 Save에서 제어 class User(models.Model): name = models.CharField(max_length=30) def save(self): is_new = False if self.pk is None: is_new = True if is_new: Profile.objects.create(user=self) class Profile(models.</description></item><item><title>pyinstaller 라이브러리 사용법 (Pyinstaller Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-03-10-pyinstaller-guide/</link><pubDate>Wed, 10 Mar 2021 14:46:19 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-03-10-pyinstaller-guide/</guid><description>python 파일을 윈도우에서 python 이나 가상환경 설정없이 실행이 가능한 .exe 으로 변환해주는 라이브러리
1. 설치 설치환경 : Windows 10
python 실행이 가능한 가상환경 터미널에서 아래의 명령어 실행
pip install pyinstaller 2. 간단한 사용예제 pyinstaller --clean --distpath . -F -n [프로그램이름] [변환시킬 파일].py 3. 옵션 옵션 설명 &amp;ndash;clean 빌드하기 전에 PyInstaller 캐시를 정리하고 임시파일 제거 -F, &amp;ndash;onefile 단일 실행파일로 생성(실행시 사용한 라이브러리 임시파일 생성됨) -D, &amp;ndash;onedir 실행 파일을 포함하는 단일 폴더로 생성 &amp;ndash;distpath DIR 실행파일 생성 경로(default: .</description></item><item><title>Go 언어 문법 (Golang grammar)</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-03-02-golang-grammar/</link><pubDate>Tue, 02 Mar 2021 16:35:21 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-03-02-golang-grammar/</guid><description>1. 디렉토리 관련 함수 2021년 3월 3일 수요일 오전 8:55:31
1.1. 단일 디렉토리 생성 os.Mkdir(path, permission)
err := os.Mkdir(&amp;#34;tmp&amp;#34;, 0755) if err != nil { log.Fatal(err) } 1.2. 다중 디렉토리 생성 os.MkdirAll(path, permission) :
err := os.MkdirAll(&amp;#34;tmp/new&amp;#34;, 0755) if err != nil { log.Fatal(err) } 1.3. 현재 작업 디렉토리 얻기 os.Getwd()
path, err := os.Getwd() if err != nil { log.Println(err) } fmt.Println(path) 1.4. 디렉토리 존재유무 확인 os.</description></item><item><title>노마드코더 쉽고 빠른 Go 시작하기(nomadcoders Go-for-beginners lectures)</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-02-22-go-for-beginners-lectures/</link><pubDate>Mon, 22 Feb 2021 00:09:23 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-02-22-go-for-beginners-lectures/</guid><description>0. 소개 설치 환경 : Windows 10 IDE : vscode
0.1. 설치 해당 URL에서 golang 설치파일을 다운받아 실행
https://golang.org/dl/ 설치파일에서 안내한 경로인 C:\Program Files\Go 폴더에 Go 설치 되었는지 확인 0.2. 설정 Go Path 환경변수 확인 Go는 지정된 Go Path 디렉토리에만 저장되어야함 시스템 환경변수에 등록된 GOPATH 값 확인 %USERPROFILE%\go -&amp;gt; C:\Users\[Profle_Name]\go 해당 경로가 Go Path 환경변수로 사용되는 경로 기본 설정 go 디렉토리로 이동하여 bin, pkg, src 디렉토리 생성 src 디렉토리안에 지정된 도메인 디렉토리 추가 go에서 다운받은 코드를 지정된 도메인 별로 분류하여 저장 src 디렉토리안에 github.</description></item><item><title>pyshark 라이브러리 사용법 (pyshark Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-10-pyshark-library-guide/</link><pubDate>Wed, 10 Feb 2021 11:13:23 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-10-pyshark-library-guide/</guid><description>설치환경 : Windows 10, python 3.7
1. 설치 와이어샤크 프로그램에 포함된 npcap 설치 필요 https://www.wireshark.org/download.html pip install pyshark 2. 사용법 캡쳐파일 읽기
capture = pyshark.FileCapture(&amp;#39;./test.pcapng&amp;#39;) 실시간 패킷캡처 interface
capture = pyshark.LiveCapture(interface=&amp;#39;이더넷&amp;#39;, bpf_filter=&amp;#39;ether src host 11:22:33:44:55:66&amp;#39;, use_json=True, include_raw=True) 패킷 캡처
패킷 1개 캡처하거나 10ms 경과하면 캡처 결과 반환 capture.sniff(packet_count=1, timeout=10) 패킷 10개 캡처하거나 10ms 경과하면 캡처 결과 반환 capture.</description></item><item><title>scapy 라이브러리 사용법 (Scapy Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-09-scapy-library-guide/</link><pubDate>Tue, 09 Feb 2021 15:25:35 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-02-09-scapy-library-guide/</guid><description>설치환경 : Windows 10
1. 설치 와이어샤크 프로그램에 포함된 npcap 설치 필요 https://www.wireshark.org/download.html pip install --pre scapy[basic] 2. Client 예제 from scapy.all import * from scapy.utils import rdpcap import datetime as dt # PCAP 파일 읽기 # could be used like this rdpcap(&amp;#34;filename&amp;#34;,500) fetches first 500 pkts pkts = rdpcap(&amp;#34;./pcap/test.pcapng&amp;#34;, -1) pkts = pkts[21:100] cnt = 0 repeat = 10 s_time = dt.</description></item><item><title>paramiko-scp 라이브러리 사용법 (paramiko-scp Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-01-06-paramiko-scp-guide/</link><pubDate>Wed, 06 Jan 2021 17:36:17 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-01-06-paramiko-scp-guide/</guid><description>paramiko, scp 라이브러리 연계 사용한 ssh 파일 전송
라이브러리 암호화 여부 속도 paramiko 로그인:암호화 / 파일전송:암호화 느림 paramiko+scp 로그인:암호화 / 파일전송:평문 보통 실습환경 : windows10, 원격서버환경 : linux(RHEL8)
사전에 ssh 접속가능한 linux를 구축한 후 실습 진행
1. 라이브러리 설치 pip install paramiko pip install scp paramiko : SSH 접속 및 종료 기능
Docs URL - http://docs.</description></item><item><title>리눅스 NFS 설정 (Linux NFS Setting)</title><link>https://sangjuncha-dev.github.io/posts/os/linux/2021-01-06-linux-nfs-setting/</link><pubDate>Wed, 06 Jan 2021 13:36:31 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/os/linux/2021-01-06-linux-nfs-setting/</guid><description>설치환경 : 레드햇8 (RHEL8)
1. NFS 서버 설정 (Server Setting) 1.1. NFS 패키지 설치 yum패키지 설치 도구로 nfs-utils 패키지 설치
yum install nfs-utils 1.2. NFS서버 서비스 실행 및 OS재부팅시 활성화 nfs서버 데몬 실행하고, OS 재부팅시 자동실행되도록 활성화
systemctl start nfs-server systemctl enable nfs-server 1.3. 외부에서 접근할 디렉토리 설정 공유할 디렉토리 생성
mkdir /NFSVOL01 외부에서 접근할 디렉토리, 외부 접근IP, 접근권한을 exports 파일로 설정
vi /etc/exports /NFSVOL01 192.168.0.0/255.255.255.0(rw) /NFSVOL01 : 공유할 디렉토리</description></item><item><title>Programmers Python (level 2)</title><link>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2020-12-22-algorithm-programmers-python-level2/</link><pubDate>Tue, 22 Dec 2020 22:38:31 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2020-12-22-algorithm-programmers-python-level2/</guid><description>프린터 분류 : 스택/큐
문제 링크
우선순위 priorities 리스트의 최댓값을 num_max변수에 대입 cursor변수에 priorities[0]값 추출하여 대입 cursor 값이 최댓값 일때 cnt 1증가 이때 location값이 0이면 break cursor 값이 최댓값 아닐때 리스트 맨뒤에 cursor 값 추가 이때 location값이 0이면 location변수에 priorities길이값 대입 location 1 감소 위의 순서를 location 0 이상일때 while문 반복실행 def solution(priorities, location): cnt = 1 while True: num_max = max(priorities) cursor = priorities.</description></item><item><title>Programmers Python (level 1)</title><link>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2020-12-15-algorithm-programmers-python-level1/</link><pubDate>Tue, 15 Dec 2020 15:05:35 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/algorithm/programmers/2020-12-15-algorithm-programmers-python-level1/</guid><description>모의고사 분류 : 완전탐색
문제 링크
입력받은 answers 리스트와 수포자들의 답 리스트와 비교하여 같다면 answer_cnt변수에 정답 개수 추가 answer_cnt 리스트의 최댓값과 각 answer_cnt 원소와 비교하여 같다면 index+1 값을 answer리스트에 추가 최대 정답자 answer 리스트 return def solution(answers): answer = [] answer_cnt = [0, 0, 0] answer_list = [ [1, 2, 3, 4, 5], [2, 1, 2, 3, 2, 4, 2, 5], [3, 3, 1, 1, 2, 2, 4, 4, 5, 5] ] # 정답 매칭 for i in range(len(answers)): ans = answers[i] if ans == answer_list[0][i%5]: answer_cnt[0] += 1 if ans == answer_list[1][i%8]: answer_cnt[1] += 1 if ans == answer_list[2][i%10]: answer_cnt[2] += 1 # 최다 정답자 추출 max_cnt = max(answer_cnt) for i, cnt in enumerate(answer_cnt): if max_cnt == cnt: answer.</description></item><item><title>LeetCode Python (Easy)</title><link>https://sangjuncha-dev.github.io/posts/algorithm/leetcode/2020-12-01-algorithm-leetcode-python-easy/</link><pubDate>Tue, 01 Dec 2020 17:30:00 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/algorithm/leetcode/2020-12-01-algorithm-leetcode-python-easy/</guid><description>1. Two Sum 문제 링크
nums 리스트 속성값 중 두개의 값이 target 값과 동일할때 해당 속성 값의 index 반환 class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: for i, num in enumerate(nums): for j, num2 in enumerate(nums[i+1:]): if i != j+i+1: if target == num+num2: return [i, j+i+1] 2020-11-27
Runtime: 40 ms, faster than 97.02% of Python3 online submissions for Two Sum.</description></item><item><title>pyftpdlib 라이브러리 사용법 (pyftpdlib Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-16-pyftpdlib-guide/</link><pubDate>Mon, 16 Nov 2020 13:30:41 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-16-pyftpdlib-guide/</guid><description>1. 라이브러리 설치 pip install pyftpdlib 실습 버전 : pyftpdlib 1.5.6
2. Server ftp server 실행 후 client 테스트 가능
from pyftpdlib.authorizers import DummyAuthorizer # 사용자 인증을 생성하는 모듈 from pyftpdlib.handlers import FTPHandler # 사용자 인증, 파일 전송, 로깅 등 FTP서버를 조작하는 모듈 # from pyftpdlib.handlers import TLS_FTPHandler from pyftpdlib.servers import FTPServer # FTP서버를 실행하는 모듈 # from pyftpdlib.servers import ThreadedFTPServer import os class FileServer: def __init__(self): self.</description></item><item><title>libmagic 라이브러리 사용법 (libmagic Library Guide)</title><link>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-05-python-magic-guide/</link><pubDate>Thu, 05 Nov 2020 09:53:16 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2020-11-05-python-magic-guide/</guid><description>미디어 타입(media type), MIME 타입(MIME type)
1. 라이브러리 설치 실행환경 : windows 10
pip install libmagic pip install python-magic-bin 실행환경 : linux
pip install libmagic pip install python-magic libmagic : 파일타입을 MIME 타입으로 확인해주는 라이브러리 python-magic-bin : 윈도우용 magic 라이브러리 python-magic : 리눅스용 magic 라이브러리 2. 예제 코드 import magic r1 = magic.from_file(&amp;#34;test1.txt&amp;#34;) r2 = magic.from_file(&amp;#34;test1.txt&amp;#34;, mime=True) print(f&amp;#34;filetype = {r1}, \nmime = {r2}&amp;#34;) # filetype = UTF-8 Unicode text, with CRLF line terminators, # mime = text/plain file_data = open(&amp;#39;test1.</description></item><item><title>PostgreDB SQL 명령어 (PostgreDB SQL Command)</title><link>https://sangjuncha-dev.github.io/posts/db/2020-10-20-postgresql-command/</link><pubDate>Tue, 20 Oct 2020 15:27:33 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/db/2020-10-20-postgresql-command/</guid><description>1. DATABASE 생성 DATABASE 생성
PostgreDB의 경우 대문자인식은 &amp;ldquo;&amp;ldquo;으로 감싸야 사용가능하다.
CREATE DATABASE &amp;#34;{database_name}&amp;#34;; 2. USER 생성 USER 생성
CREATE USER {user_name} WITH PASSWORD &amp;#39;{user_password}&amp;#39; SUPERUSER 권한부여(개발용 계정으로 사용 예정)
ALTER USER {user_name} WITH SUPERUSER; 유저에게 특정 권한 부여
GRANT {permissions} ON DATABASE {db_name} TO {user_name}; 참고 URL : https://www.postgresql.org/docs/current/sql-grant.html
예시
GRANT ALL ON DATABASE &amp;#34;ABCD_DB&amp;#34; TO abcd_user; 계정 부여권한 해제</description></item><item><title>MSSQL SQL 명령어 (MSSQL SQL Command)</title><link>https://sangjuncha-dev.github.io/posts/db/2020-10-13-mssql-command/</link><pubDate>Tue, 13 Oct 2020 14:52:25 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/db/2020-10-13-mssql-command/</guid><description>1. 테이블 생성 (Create Table) CREATE TABLE 테이블명( 컬럼명 타입(크기) NOT NULL, --NULL 값이 들어갈 수 없음 컬럼명 타입 NULL DEFAULT(값), --초기값 지정 CONSTRAIN PK이름 PRIMARY KEY(컬럼명) --PK설정 ) 컬럼 타입 : INT / NVARCHAR / VARCHAR / DATETIME
CREATE TABLE MY_TABLE( NO_EMP NVARCHAR(10)NOT NULL, -- NULL 값이 들어갈 수 없음 NM_KOR NVARCHAR(40)NOT NULL, -- NULL 값이 들어갈 수 없음 AGE INT NULL DEFAULT (0), --초기값 = 0 TODAY DATETIME DEFAULT(GETDATE()), --초기값 현재날짜 ) --CONSTRAINT PK_MY_TABLE PRIMARY KEY(NO_EMP)--PK : NO_EMP ) CREATE TABLE MY_TABLE2( ID int PRIMARY KEY, DATA_JSON nvarchar NULL, CODE nvarchar(20) NOT NULL, IMAGE_PATH nvarchar(300) NOT NULL, IMAGE_NAME nvarchar(100) NOT NULL, IMAGE_TYPE nvarchar(5) NOT NULL, IN_DATE datetime default(GETDATE()) NOT NULL ) 2.</description></item><item><title>PostgreDB 설치 (PostgreDB Setup)</title><link>https://sangjuncha-dev.github.io/posts/db/2020-09-29-postgredb-setup/</link><pubDate>Tue, 29 Sep 2020 15:07:59 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/db/2020-09-29-postgredb-setup/</guid><description>설치환경 : Windows 10
1. PostgreDB 설치 1.1. 설치파일 다운로드 윈도우즈용 설치 파일은 현재 EnterpriseDB사가 배포
Download URL
https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
1.2. PostgreSQL 설치 postgresql-[버전]-windows-x64.exe 파일을 실행 Next 클릭 설치할 소프트웨어를 선택하는 대화창(Select Components)에서 아래 2개만 설치 [ ] PostgreSQL Server
[ ] Command Line Tools
Next 클릭 후, PostgreSQL 서버를 사용하면서 자료저장 위치 지정(default) 기본 데이터베이스 관리자 postgres계정 비밀번호 지정 포트 지정 &amp;gt; 15432(기본포트가 아닌 다른포트번호) 으로 수정후 [Next] 클릭 2.</description></item><item><title>MariaDB SQL 명령어 (MariaDB SQL Command)</title><link>https://sangjuncha-dev.github.io/posts/db/2020-09-28-mariadb-command/</link><pubDate>Mon, 28 Sep 2020 15:04:59 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/db/2020-09-28-mariadb-command/</guid><description>1. database 확인 SHOW DATABASES; 2. database 생성 CREATE DATABASE database_name; 3. 특정 database 접속 USE database_name; 3-1. mysql database 접속 USE mysql; 4. 사용자 확인 MariaDB[mysql] SELECT HOST, USER, PASSWORD FROM USER; 5. 사용자 계정 생성 &amp;lsquo;id&amp;rsquo;@&amp;rsquo;localhost&amp;rsquo; 이면 로컬에서만 접속 가능 CREATE USER &amp;#39;user_id&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;user_password&amp;#39;; CREATE USER &amp;#39;user_id&amp;#39; IDENTIFIED BY &amp;#39;user_password&amp;#39;; 6. 사용자 권한 부여 GRANT ALL PRIVILEGES ON database_name.* TO &amp;#39;user_id&amp;#39;@&amp;#39;%&amp;#39;; GRANT ALL PRIVILEGES ON database_name.</description></item><item><title/><link>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-17-python-datastructures-and-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/python/2021-05-17-python-datastructures-and-algorithms/</guid><description>Part 1 헬로, 자료구조! Chapter 01 숫자 1.1 정수 int() 불변형 객체로 문자열을 정수로 변환하거나 다른 진법의 문자열을 정수로 변환
int(문자열, 밑(n진법))
&amp;gt;&amp;gt;&amp;gt; s = &amp;#39;11&amp;#39; &amp;gt;&amp;gt;&amp;gt; b = int(s, 2) &amp;gt;&amp;gt;&amp;gt; print(b) 11 정수에 필요한 바이트 수(python 3.1이상)
&amp;gt;&amp;gt;&amp;gt; (정수).bit_length() 10 발생가능한 Exception : ValueError
1.2 부동 소수점 float() float 32bit
1bit 부호, 8bit 지수, 23bit 유효 숫자 자릿수 1.2.1 부동소수점끼리 비교하기 이진수 분수로 표현으로 소수점의 정확한 비교는 어렵지만,</description></item></channel></rss>