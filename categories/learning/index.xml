<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning on Sangjun 개발 블로그</title><link>https://sangjuncha-dev.github.io/categories/learning/</link><description>Recent content in Learning on Sangjun 개발 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 02 Aug 2021 17:56:14 +0900</lastBuildDate><atom:link href="https://sangjuncha-dev.github.io/categories/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>golang learn-go-with-tests GitBook 정리</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-08-02-golang-learn-go-with-tests/</link><pubDate>Mon, 02 Aug 2021 17:56:14 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-08-02-golang-learn-go-with-tests/</guid><description>사이트 주소 원본 링크
한글 번역 링크
5. struct, method &amp;amp; interface struct 구조체의 변수 첫글자는 대문자여야한다. (외부에서 사용 가능하도록)
type Rectangle struct { Width float64 Height float64 } 구조체 필드이름을 선택적으로 지정할 수 있다.
{shape: Rectangle{Width: 12, Height: 6}, want: 72.0}, {shape: Circle{Radius: 10}, want: 314.1592653589793}, methods func (receiverName ReceiverType) MethodName(args) r Rectangle 수신자 변수를 유형의 첫 번째 문자로 지정하는 것이 Go의 관례이다.
func (r Rectangle) Area() float64 { return 0 } interface Go에서 인터페이스 자료형은 암시적 이다.</description></item><item><title>Go 언어 문법 (Golang grammar)</title><link>https://sangjuncha-dev.github.io/posts/programming/golang/2021-03-02-golang-grammar/</link><pubDate>Tue, 02 Mar 2021 16:35:21 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/programming/golang/2021-03-02-golang-grammar/</guid><description>1. 디렉토리 관련 함수 2021년 3월 3일 수요일 오전 8:55:31
1.1. 단일 디렉토리 생성 os.Mkdir(path, permission)
err := os.Mkdir(&amp;#34;tmp&amp;#34;, 0755) if err != nil { log.Fatal(err) } 1.2. 다중 디렉토리 생성 os.MkdirAll(path, permission) :
err := os.MkdirAll(&amp;#34;tmp/new&amp;#34;, 0755) if err != nil { log.Fatal(err) } 1.3. 현재 작업 디렉토리 얻기 os.Getwd()
path, err := os.Getwd() if err != nil { log.Println(err) } fmt.Println(path) 1.4. 디렉토리 존재유무 확인 os.Stat(paht)
if _, err := os.</description></item></channel></rss>