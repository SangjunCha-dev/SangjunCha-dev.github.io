<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Sangjun 개발 블로그</title><link>https://sangjuncha-dev.github.io/categories/docker/</link><description>Recent content in Docker on Sangjun 개발 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 22 Dec 2021 15:22:06 +0900</lastBuildDate><atom:link href="https://sangjuncha-dev.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>golang 도커 이미지 만들기</title><link>https://sangjuncha-dev.github.io/posts/devops/docker/2021-12-22-docker-golang-image-build/</link><pubDate>Wed, 22 Dec 2021 15:22:06 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/devops/docker/2021-12-22-docker-golang-image-build/</guid><description>간단한 golang 웹 프로그램을 Docker 이미지로 실행방법으로
golang 코드보다는 docker 설정 위주로 설명한다.
1. 예제 코드 사용예시는 아래의 주소를 git clone 받는다.
&amp;gt; git clone https://github.com/olliefr/docker-gs-ping docker-gs-ping 2. 예제 프로그램 실행 git clone 받은 프로젝트 경로에서 터미널을 실행하고 진행한다.
&amp;gt; go run main.go 설정한 웹주소로 접속 요청시 간단한 response 메세지를 응답한다.
&amp;gt; curl localhost:8080 Hello, Docker! &amp;lt;3 3. Dockerfile dockerfile 명칭은 Dockerfile.&amp;lt;something&amp;gt; 또는 &amp;lt;something&amp;gt;.Dockerfile 형식으로 생성한다.
도커 명령어
FROM : 기본 이미지 지정 WORKDIR : 작업 디렉터리 지정 COPY : 소스코드 복사 https://docs.</description></item><item><title>도커 경량화 이미지 만들기</title><link>https://sangjuncha-dev.github.io/posts/devops/docker/2021-12-21-docker-reduce-the-volume/</link><pubDate>Tue, 21 Dec 2021 11:24:13 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/devops/docker/2021-12-21-docker-reduce-the-volume/</guid><description>Docker Image 경량화의 장점
저장공간 절약 이미지 빌드 및 배포시간 단축 클라우드 서비스를 이용한 배포의 경우 비용 절약 1. 가벼운 Base image 사용 Base image에는 사용하지 않은 기능들이 포함되어 있기때문에 Debian계열과 Alpine 계열등 다양한 Base image를 사용하여 용량을 줄일 수 있다.
단, 필요한 패키지나 파일이 없어 별도의 설치가 필요할 수 있다. 기본 python 이미지와 slim형 이미지를 각각 빌드한다.
image-test1
FROM python:3.8.10 image-test2
FROM python:3.8.10-slim-buster 각각 빌드된 이미지 크기는 다음과 같다.</description></item><item><title>mssql 2017 도커 이미지 설치 및 컨테이너 실행방법</title><link>https://sangjuncha-dev.github.io/posts/devops/docker/2021-05-06-docker-mssql2017-setup/</link><pubDate>Thu, 06 May 2021 22:29:30 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/devops/docker/2021-05-06-docker-mssql2017-setup/</guid><description>1. mssql docker 도커 설치 방법 1.1. 도커 허브에서 이미지 검색 docker search &amp;lt;검색할 이미지 이름&amp;gt; 1.2. pull - 도커 이미지 다운받기 docker pull mcr.microsoft.com/mssql/server:2017-latest 1.3. docs 예시 docker run -e &amp;#34;ACCEPT_EULA=Y&amp;#34; -e &amp;#34;SA_PASSWORD=&amp;lt;YourStrong@Passw0rd&amp;gt;&amp;#34; -p 1433:1433 --name mssql2017 -h mssql2017 -v &amp;lt;host directory&amp;gt;/data:/var/opt/mssql/data -v &amp;lt;host directory&amp;gt;/log:/var/opt/mssql/log -v &amp;lt;host directory&amp;gt;/secrets:/var/opt/mssql/secrets -d mcr.microsoft.com/mssql/server:2017-latest Docker on Windows 의 호스트 볼륨 매핑은 현재 /var/opt/mssql 디렉토리가 아닌 /var/opt/mssql/data 등의 하위 디렉터리를 호스트 머신에 매핑할 수 있다.</description></item><item><title>PostgreDB, pgadmin4 도커 설치 방법</title><link>https://sangjuncha-dev.github.io/posts/devops/docker/2021-04-29-docker-postgresdb-pgadmin4-setup-guide/</link><pubDate>Thu, 29 Apr 2021 16:29:43 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/devops/docker/2021-04-29-docker-postgresdb-pgadmin4-setup-guide/</guid><description>1. Postgres Docker 이미지 설치 Postgres Version : 13.2
1.1. 다운로드 및 설정 아래 명령어를 실행한다.
$ docker run -p 15432:5432 --name postgres -e POSTGRES_PASSWORD=password1! -d postgres -d : 백그라운드에서 컨테이너 실행 -p 15432:5432 : 호스트와 컨테이너 간의 배포(publish)포트/바인드(bind)포트 호스트 15432번 포트를 컨테이너 5432번 포트에 매핑 --name : 생성할 컨테이너 이름 -e : 도커 컨테이너의 환경변수 설정 POSTGRES_PASSWORD : PostgresDB 관리자 비밀번호 실행 결과
Unable to find image &amp;#39;postgres:latest&amp;#39; locally latest: Pulling from library/postgres 75646c2fb410: Pull complete 2355d0ffeb55: Pull complete 7e98825f6d67: Pull complete cfd3ce06be45: Pull complete c7b7bb83e8f7: Pull complete c67869305108: Pull complete 19614baa7ddd: Pull complete af508737d813: Pull complete b60c3437a436: Pull complete 424da1ff3ea9: Pull complete 076f107f1898: Pull complete 7b398ea488bf: Pull complete e0fcc114ae29: Pull complete 67d927dd9b8a: Pull complete Digest: sha256:b25265ac1dfa19224fd47dd9f5744aa177248fd64e89f407446559cc7dbc7a23 Status: Downloaded newer image for postgres:latest 47d090f5c4a593b833c237cef181f960571e71004ace5ebc804907f4feae1433 1.</description></item><item><title>도커의 개요 및 windows10 버전 설치 방법</title><link>https://sangjuncha-dev.github.io/posts/devops/docker/2021-04-08-docker-summary/</link><pubDate>Thu, 08 Apr 2021 19:04:55 +0900</pubDate><guid>https://sangjuncha-dev.github.io/posts/devops/docker/2021-04-08-docker-summary/</guid><description>1. 개요 도커(Docker)는 리눅스 컨테이너를 기반으로 특정 서비스를 패키징하고 배포할 수 있는 오픈소스 프로그램이다.
컨테이너 : 리눅스 커널 네임 스페이스, cgroup의 기능을 활용하여 호스트 시스템의 모든 프로세스와 격리된 시스템의 프로세스 2. 도커를 사용하는 이유 도커는 소프트웨어 버전관리, 애플리케이션 배포, 개발환경 구성등 사전에 생성하고 도커 이미지를 배포하고 배포한 이미지를 컨테이너에 담아서 사용된다.
도커 이미지 : 컨테이너의 파일시스템과 애플리케이션 실행에 필요한 모든 항목(모든 종속성, 구성, 스크립트, 바이너리, 환경변수, 실행하는 기본 명령)이 포함된다.</description></item></channel></rss>